---
- hosts: localhost
  tasks:
    - name: Install homebrew
      include_role:
        name: geerlingguy.mac.homebrew

    - name: Make sure homebrew bin is in path
      ansible.builtin.lineinfile:
        path: /etc/paths
        state: present
        line: '/opt/homebrew/bin'
      become: true
      become_user: root

    - name: 'add custom homebrew repos'
      community.general.homebrew_tap:
        name: [
          adoptopenjdk/openjdk,
          homebrew/cask-versions,
          thoughtbot/formulae,
          weaveworks/tap,
        ]

    - name: Install core packages via brew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
      ignore_errors: yes
      with_items:
        # - datagrip
        - docker
        - google-chrome
        - iterm2
        - sublime-text
        - telegram
        - visual-studio-code
        - vlc

    - name: "Install homebrew packages"
      community.general.homebrew:
        name: [
          'autoconf',
          'automake',
          'awscli',
          'atuin',
          'bfg',
          'coreutils',
          'curl',
          'direnv',
          'dnsmasq',
          'fzf',
          'gnu-time',
          'htop',
          'libtool',
          'libxslt',
          'libyaml',
          'openssl' ,
          'readline',
          'unzip',
          'zlib',
          'zsh',
          'pipx',
          'tldr'
        ]
        state: present
        update_homebrew: yes


    - name: Get the path to ZSH
      become: false
      local_action: command which zsh
      register: zsh_path

    - name: "Ensure homebrew zsh is in allowed shells"
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path.stdout }}"
      become: true

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"

    - name: Set ZSH as the default shell
      shell: chsh -s $(which zsh) {{ lookup('env', 'USER') }}
      become: true

    - name: "Create a default ZSH configuration"
      template:
        src: templates/.zshrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.zshrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create a default VSCode configuration
      template:
        src: templates/vscode-settings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/settings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create a default VSCode keuybinding configuration
      template:
        src: templates/vscode-keybindings.json.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/keybindings.json
        owner: "{{ lookup('env', 'USER') }}"
        force: yes 

    - git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "/Users/{{ lookup('env', 'USER') }}/.asdf"
        version: v0.14.0

    - name: "Create a default asdf configuration"
      template:
        src: templates/.asdfrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: "Install asdf plugins"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf plugin-add {{ item }} || exit 0
      with_items:
        - python

    - name: "Install Default Python"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install python 3.12.2
        asdf global python 3.12.2
        pip3 install ansible
        asdf reshim python
        
    - name: "Setup pipx and venv and atuin"
      shell: |
        echo "alias pip=pipx" >> /Users/{{ lookup('env', 'USER') }}/.zshrc
        echo 'eval "$(atuin init zsh)"' >> /Users/{{ lookup('env', 'USER') }}/.zshrc
        pipx ensurepath
        source /Users/{{ lookup('env', 'USER') }}/.zshrc
        pip install virtualenv
        mkdir /Users/{{ lookup('env', 'USER') }}/venv

    - name: Add venv() function to zshrc
      blockinfile:
        path: "/Users/{{ lookup('env', 'USER') }}/.zshrc"
        block: |
          venv() {
              local env_name="$1"
              local venv_path="$HOME/venv/$env_name"

              if [ -d "$venv_path" ]; then
                  # If the virtual environment exists, activate it
                  source "$venv_path/bin/activate"
              else
                  # If the virtual environment doesn't exist, create it and activate it
                  virtualenv "$venv_path"
                  source "$venv_path/bin/activate"
              fi
          }
      
    
        

